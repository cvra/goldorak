#!/usr/bin/env python
PACKAGE = "goldorak_base"
MAX_VALUE = 1000000
MAX_VOLTAGE = 20

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

size_mode = gen.enum([gen.const("MODE_OPEN_LOOP",      int_t, 0, "Open loop speed control (voltage control, speed setpoint is in V)"),
                      gen.const("MODE_INDEX",          int_t, 1, "Periodic, speed control with index"),
                      gen.const("MODE_ENC_PERIODIC",   int_t, 2, "Periodic, encoder on motor axis"),
                      gen.const("MODE_ENC_BOUNDED",    int_t, 3, "Bounded, encoder on motor axis"),
                      gen.const("MODE_2_ENC_PERIODIC", int_t, 4, "Periodic, encoder on motor axis, 2nd encoder on output"),
                      gen.const("MODE_MOTOR_POT",      int_t, 5, "Bounded, potentiometer (servo mode)")],
                     "An enum to set operation mode")

gen.add("mode", int_t, 0, "Operation mode (enum)", 1, 0, 5, edit_method=size_mode)

gen.add("torque_limit",       double_t, 0, "Torque limit of the motor [Nm]", 0, 0, MAX_VALUE)
gen.add("velocity_limit",     double_t, 0, "Velocity limit of the motor [rad/s]", 0, 0, MAX_VALUE)
gen.add("acceleration_limit", double_t, 0, "Acceleration limit of the motor [rad/s^2]", 0, 0, MAX_VALUE)
gen.add("low_batt_th",        double_t, 0, "Low battery threshold [V]", 0, 0, MAX_VOLTAGE)

gen.add("thermal_capacity",     double_t, 0, "Thermal capacity[J/K]", 0, 0, MAX_VALUE)
gen.add("thermal_resistance",   double_t, 0, "Thermal resistance to ambient which is assumed 25degC [K/W]", 0, 0, MAX_VALUE)
gen.add("thermal_current_gain", double_t, 0, "Coil_resistance [ohm = W/A^2]", 0, 0, MAX_VALUE)
gen.add("max_temperature",      double_t, 0, "Maximal temperature [degC]", 0, 0, MAX_VALUE)

gen.add("torque_constant",      double_t, 0, "Motor torque constant [Nm/A]", 0, 0, MAX_VALUE)

gen.add("transmission_ratio_p", int_t, 0, "Transmission ratio numerator output/motor", 0, 0, MAX_VALUE)
gen.add("transmission_ratio_q", int_t, 0, "Transmission ratio denominator output/motor", 0, 0, MAX_VALUE)
gen.add("motor_encoder_steps_per_revolution", int_t, 0, "Primary encoder steps per turn (0=NA)", 0, 0, 2 * MAX_VALUE)
gen.add("second_encoder_steps_per_revolution", int_t, 0, "Secondary encoder steps per turn (0=NA)", 0, 0, 2 * MAX_VALUE)
gen.add("potentiometer_gain", double_t, 0, "Potentiometer gain (servo mode)", 0, 0, MAX_VALUE)

exit(gen.generate(PACKAGE, "goldorak_base", "MotorBoard"))
